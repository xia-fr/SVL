#include "LobattoQuadrature.hpp"

//Overload constructor.
LobattoQuadrature::LobattoQuadrature(std::string name, unsigned int nQp) :
QuadratureRule("Lobatto"), nQuadraturePoints(nQp) {
    //Sets the Lobatto Quadrature Order for 1D, 2D, and 3D elements.
    if(strcasecmp(name.c_str(),"Line") == 0){
        nOrderQuadrature = nQp;
        //Quadrature number for Line is not implemented.
        if( (nQp == 1) | (nQp > 5) ){
            nOrderQuadrature  =  3;
            nQuadraturePoints =  3;
        }
    }
    else if(strcasecmp(name.c_str(),"Tria") == 0){
        if(nQp == 1)
            nOrderQuadrature = 1;
        else if(nQp == 3)
            nOrderQuadrature = 2;
        else if(nQp == 7)
            nOrderQuadrature = 3;
        else if(nQp == 13)
            nOrderQuadrature = 4;
        else{
            nOrderQuadrature  =  3;
            nQuadraturePoints =  7;
        }
    }
    else if(strcasecmp(name.c_str(),"Quad") == 0){
        if(nQp == 4)
            nOrderQuadrature = 2;
        else if(nQp == 9)
            nOrderQuadrature = 3;
        else if(nQp == 16)
            nOrderQuadrature = 4;
        else if(nQp == 25)
            nOrderQuadrature = 5;
        else{
            nOrderQuadrature  = 3;
            nQuadraturePoints = 9;
        }
    }
    else if(strcasecmp(name.c_str(),"Tetra") == 0){
        if(nQp == 1)
            nOrderQuadrature = 1;
        else if(nQp == 4)
            nOrderQuadrature = 2;
        else if(nQp == 11)
            nOrderQuadrature = 3;
        else if(nQp == 16)
            nOrderQuadrature = 4;
        else{
            nOrderQuadrature  =  3;
            nQuadraturePoints =  11;
        }
    }
    else if(strcasecmp(name.c_str(),"Hexa") == 0){
        if(nQp == 8)
            nOrderQuadrature = 2;
        else if(nQp == 27)
            nOrderQuadrature = 3;
        else if(nQp == 64)
            nOrderQuadrature = 4;
        else if(nQp == 125)
            nOrderQuadrature = 5;
        else{
            nOrderQuadrature  =  3;
            nQuadraturePoints =  27;
        }
    }
}

//Destructor.
LobattoQuadrature::~LobattoQuadrature(){
    //Does nothing.
}

//Gets Number of Lobatto Integration Points.
unsigned int 
LobattoQuadrature::GetNumberOfQuadraturePoints(){
    return nQuadraturePoints;
}

//Gets Lobatto Integration Points.
void
LobattoQuadrature::GetQuadraturePoints(std::string name, Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    //Sets the Lobatto Quadrature Order for 1D, 2D, and 3D elements.
    if(strcasecmp(name.c_str(),"Line") == 0)
        SetLineQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Tria") == 0)
        SetTriaQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Quad") == 0)
        SetQuadQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Tetra") == 0)
        SetTetraQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Hexa") == 0)
        SetHexaQuadraturePoints(Weights, Points);
}

//Sets Lobatto Quadrature for Line Elements.
void 
LobattoQuadrature::SetLineQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 2){
        //Two-point Lobatto quadrature.
        Weights.resize(2);
        Weights <<  1.0000000000000000,
                    1.0000000000000000;

        Points.resize(2,1);
        Points  << -1.0000000000000000,
                    1.0000000000000000;
    }
    else if(nOrderQuadrature == 3){
        //Three-point Lobatto quadrature.
        Weights.resize(3);
        Weights <<  0.3333333333333333,
                    1.3333333333333333,
                    0.3333333333333333;

        Points.resize(3,1);
        Points  << -1.0000000000000000,
                    0.0000000000000000,
                    1.0000000000000000;
    }
    else if(nOrderQuadrature == 4){
        //Four-point Lobatto quadrature.
        Weights.resize(4);
        Weights <<  0.1666666666666667,
                    0.8333333333333334,
                    0.8333333333333334,
                    0.1666666666666667;

        Points.resize(4,1);
        Points  << -1.0000000000000000,
                   -0.4472135954999579,
                    0.4472135954999579,
                    1.0000000000000000;
    }
    else if(nOrderQuadrature == 5){
        //Five-point Lobatto quadrature.
        Weights.resize(5);
        Weights <<  0.1000000000000000,
                    0.5444444444444444,
                    0.7111111111111111,
                    0.5444444444444444,
                    0.1000000000000000;

        Points.resize(5,1);
        Points  << -1.0000000000000000,
                   -0.6546536707079772,
                    0.0000000000000000,
                    0.6546536707079772,
                    1.0000000000000000;
    }
}

//Sets Lobatto Quadrature for Triangular Elements.
void 
LobattoQuadrature::SetTriaQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    //TODO: Define the real Gauss-Lobatto integration point for Tria. The points below are the standard Gauss points.
    if(nOrderQuadrature == 1){
        //One-point Lobatto quadrature.
        Weights.resize(1);
        Weights <<  0.5000000000000;

        Points.resize(1, 2);
        Points  <<  0.3333333333333, 0.3333333333333;
    }
    else if(nOrderQuadrature == 2){
        //Three-point Lobatto quadrature.
        Weights.resize(3);
        Weights <<  0.1666666666666,
                    0.1666666666666,
                    0.1666666666666;

        Points.resize(3, 2);
        Points  <<  0.1666666666666, 0.1666666666666, 
                    0.6666666666666, 0.1666666666666, 
                    0.1666666666666, 0.6666666666666;
    }
    else if(nOrderQuadrature == 3){
        //Seven-point Lobatto quadrature.
        Weights.resize(7);
        Weights <<  0.0629695902724,
                    0.0629695902724,
                    0.0629695902724,
                    0.0661970763942,
                    0.0661970763942,
                    0.0661970763942,
                    0.1125000000000; 

        Points.resize(7, 2);
        Points  <<  0.1012865073235, 0.1012865073235, 
                    0.7974269853531, 0.1012865073235, 
                    0.1012865073235, 0.7974269853531,
                    0.4701420641051, 0.0597158717898, 
                    0.4701420641051, 0.4701420641051, 
                    0.0597158717898, 0.4701420641051, 
                    0.3333333333333, 0.3333333333333;
    }
    else if(nOrderQuadrature == 4){
        //Thirteen-point Lobatto quadrature.
        Weights.resize(13);
        Weights <<  0.0266736178044,
                    0.0266736178044,
                    0.0266736178044,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0878076287166,
                    0.0878076287166,
                    0.0878076287166,
                   -0.0747850222338; 

        Points.resize(13, 2);
        Points  <<  0.0651301029022, 0.0651301029022, 
                    0.8697397941956, 0.0651301029022, 
                    0.0651301029022, 0.8697397941956,
                    0.3128654960049, 0.0486903154253, 
                    0.6384441885698, 0.3128654960049, 
                    0.0486903154253, 0.6384441885698, 
                    0.6384441885698, 0.0486903154253,
                    0.3128654960049, 0.6384441885698, 
                    0.0486903154253, 0.3128654960049, 
                    0.2603459660790, 0.2603459660790,
                    0.4793080678419, 0.2603459660790, 
                    0.2603459660790, 0.4793080678419, 
                    0.3333333333333, 0.3333333333333;
    }
}

//Sets Lobatto Quadrature for Quadrilateral Elements.
void 
LobattoQuadrature::SetQuadQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 2){
        //Two-point Lobatto quadrature.
        Weights.resize(4);
        Weights <<  1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000;

        Points.resize(4,2);
        Points  << -1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000;
    }
    else if(nOrderQuadrature == 3){
        //Three-point Lobatto quadrature.
        Weights.resize(9);
        Weights <<  0.1111111111111111,
                    0.4444444444444444,
                    0.1111111111111111,
                    0.4444444444444444,
                    1.7777777777777777,
                    0.4444444444444444,
                    0.1111111111111111,
                    0.4444444444444444,
                    0.1111111111111111;

        Points.resize(9,2);
        Points  << -1.0000000000000000, -1.0000000000000000,
                    0.0000000000000000, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000,
                    0.0000000000000000,  0.0000000000000000,
                    1.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,
                    0.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000;
    }
    else if(nOrderQuadrature == 4){
        //Four-point Lobatto quadrature.
        Weights.resize(16);
        Weights <<  0.0277777777777778,
                    0.1388888888888889,
                    0.1388888888888889,
                    0.0277777777777778,
                    0.1388888888888889,
                    0.6944444444444445,
                    0.6944444444444445,
                    0.1388888888888889,
                    0.1388888888888889,
                    0.6944444444444445,
                    0.6944444444444445,
                    0.1388888888888889,
                    0.0277777777777778,
                    0.1388888888888889,
                    0.1388888888888889,
                    0.0277777777777778;

        Points.resize(16,2);
        Points  << -1.0000000000000000, -1.0000000000000000,
                   -0.4472135954999579, -1.0000000000000000,
                    0.4472135954999579, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -0.4472135954999579,
                   -0.4472135954999579, -0.4472135954999579,
                    0.4472135954999579, -0.4472135954999579,
                    1.0000000000000000, -0.4472135954999579,
                   -1.0000000000000000,  0.4472135954999579,
                   -0.4472135954999579,  0.4472135954999579,
                    0.4472135954999579,  0.4472135954999579,
                    1.0000000000000000,  0.4472135954999579,
                   -1.0000000000000000,  1.0000000000000000,
                   -0.4472135954999579,  1.0000000000000000,
                    0.4472135954999579,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000;
    }
    else if(nOrderQuadrature == 5){
        //Five-point Lobatto quadrature.
        Weights.resize(25);
        Weights <<  0.0100000000000000,
                    0.0544444444444444,
                    0.0711111111111111,
                    0.0544444444444444,
                    0.0100000000000000,
                    0.0544444444444444,
                    0.2964197530864197,
                    0.3871604938271605,
                    0.2964197530864197,
                    0.0544444444444444,
                    0.0711111111111111,
                    0.3871604938271605,
                    0.5056790123456790,
                    0.3871604938271605,
                    0.0711111111111111,
                    0.0544444444444444,
                    0.2964197530864197,
                    0.3871604938271605,
                    0.2964197530864197,
                    0.0544444444444444,
                    0.0100000000000000,
                    0.0544444444444444,
                    0.0711111111111111,
                    0.0544444444444444,
                    0.0100000000000000;

        Points.resize(25,2);
        Points  << -1.0000000000000000, -1.0000000000000000,
                   -0.6546536707079772, -1.0000000000000000,
                    0.0000000000000000, -1.0000000000000000,
                    0.6546536707079772, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -0.6546536707079772,
                   -0.6546536707079772, -0.6546536707079772,
                    0.0000000000000000, -0.6546536707079772,
                    0.6546536707079772, -0.6546536707079772,
                    1.0000000000000000, -0.6546536707079772,
                   -1.0000000000000000,  0.0000000000000000,
                   -0.6546536707079772,  0.0000000000000000,
                    0.0000000000000000,  0.0000000000000000,
                    0.6546536707079772,  0.0000000000000000,
                    1.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000,  0.6546536707079772,
                   -0.6546536707079772,  0.6546536707079772,
                    0.0000000000000000,  0.6546536707079772,
                    0.6546536707079772,  0.6546536707079772,
                    1.0000000000000000,  0.6546536707079772,
                   -1.0000000000000000,  1.0000000000000000,
                   -0.6546536707079772,  1.0000000000000000,
                    0.0000000000000000,  1.0000000000000000,
                    0.6546536707079772,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000;
    }
}

//Sets Lobatto Quadrature for Tetrahedron Elements.
void 
LobattoQuadrature::SetTetraQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    //TODO: Define the real Gauss-Lobatto integration point for Tetra. The points below are the standard Gauss points.
    if(nOrderQuadrature == 1){
        //One-point Lobatto quadrature.
        Weights.resize(1);
        Weights <<  0.166666666666666;

        Points.resize(1, 3);
        Points  <<  0.250000000000000, 0.250000000000000, 0.250000000000000; 
    }
    else if(nOrderQuadrature == 2){
        //Four-point Lobatto quadrature.
        Weights.resize(4);
        Weights <<  0.041666666666667,
                    0.041666666666667,
                    0.041666666666667,
                    0.041666666666667;

        Points.resize(4, 3);
        Points  <<  0.585410196624969, 0.138196601125011, 0.138196601125011,
                    0.138196601125011, 0.138196601125011, 0.138196601125011,
                    0.138196601125011, 0.138196601125011, 0.585410196624969,
                    0.138196601125011, 0.585410196624969, 0.138196601125011;
    }
    else if(nOrderQuadrature == 3){
        //Eleven-point Lobatto quadrature.
        Weights.resize(11);
        Weights << -0.013155555555556,
                    0.007622222222222,
                    0.007622222222222,
                    0.007622222222222,
                    0.007622222222222,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889;

        Points.resize(11, 3);
        Points  <<  0.250000000000000, 0.250000000000000, 0.250000000000000,
                    0.785714285714286, 0.071428571428571, 0.071428571428571,
                    0.071428571428571, 0.071428571428571, 0.071428571428571,
                    0.071428571428571, 0.071428571428571, 0.785714285714286,
                    0.071428571428571, 0.785714285714286, 0.071428571428571,
                    0.100596423833201, 0.399403576166799, 0.399403576166799,
                    0.399403576166799, 0.100596423833201, 0.399403576166799,
                    0.399403576166799, 0.399403576166799, 0.100596423833201,
                    0.399403576166799, 0.100596423833201, 0.100596423833201,
                    0.100596423833201, 0.399403576166799, 0.100596423833201,
                    0.100596423833201, 0.100596423833201, 0.399403576166799;
    }
    else if(nOrderQuadrature == 4){
        //Fifteen-point Lobatto quadrature.
        Weights.resize(15);
        Weights <<  0.030283678097089,
                    0.006026785714286,
                    0.006026785714286,
                    0.006026785714286,
                    0.006026785714286,
                    0.011645249086029,
                    0.011645249086029,
                    0.011645249086029,
                    0.011645249086029,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386;

        Points.resize(15, 3);
        Points  <<  0.250000000000000, 0.250000000000000, 0.250000000000000,
                    0.000000000000000, 0.333333333333333, 0.333333333333333,
                    0.333333333333333, 0.333333333333333, 0.333333333333333,
                    0.333333333333333, 0.333333333333333, 0.000000000000000,
                    0.333333333333333, 0.000000000000000, 0.333333333333333,
                    0.727272727272727, 0.090909090909091, 0.090909090909091,
                    0.090909090909091, 0.090909090909091, 0.090909090909091,
                    0.090909090909091, 0.090909090909091, 0.727272727272727,
                    0.090909090909091, 0.727272727272727, 0.090909090909091,
                    0.433449846426336, 0.066550153573664, 0.066550153573664,
                    0.066550153573664, 0.433449846426336, 0.066550153573664,
                    0.066550153573664, 0.066550153573664, 0.433449846426336,
                    0.066550153573664, 0.433449846426336, 0.433449846426336,
                    0.433449846426336, 0.066550153573664, 0.433449846426336,
                    0.433449846426336, 0.433449846426336, 0.066550153573664;
    }
}

//Sets Lobatto Quadrature for Hexahedron Elements.
void 
LobattoQuadrature::SetHexaQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 2){
        //Two-point Lobatto quadrature.
        Weights.resize(8);
        Weights <<  1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000,
                    1.0000000000000000;

        Points.resize(8,3);
        Points  << -1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000,  1.0000000000000000;
    }
    else if(nOrderQuadrature == 3){
        //Three-point Lobatto quadrature.
        Weights.resize(27);
        Weights <<  0.0370370370370370,
                    0.1481481481481481,
                    0.0370370370370370,
                    0.1481481481481481,
                    0.5925925925925926,
                    0.1481481481481481,
                    0.0370370370370370,
                    0.1481481481481481,
                    0.0370370370370370,
                    0.1481481481481481,
                    0.5925925925925926,
                    0.1481481481481481,
                    0.5925925925925926,
                    2.3703703703703702,
                    0.5925925925925926,
                    0.1481481481481481,
                    0.5925925925925926,
                    0.1481481481481481,
                    0.0370370370370370,
                    0.1481481481481481,
                    0.0370370370370370,
                    0.1481481481481481,
                    0.5925925925925926,
                    0.1481481481481481,
                    0.0370370370370370,
                    0.1481481481481481,
                    0.0370370370370370;

        Points.resize(27,3);
        Points  << -1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                    0.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000, -1.0000000000000000,
                    0.0000000000000000,  0.0000000000000000, -1.0000000000000000,
                    1.0000000000000000,  0.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                    0.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -1.0000000000000000,  0.0000000000000000,
                    0.0000000000000000, -1.0000000000000000,  0.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000,  0.0000000000000000,
                    0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
                    1.0000000000000000,  0.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,  0.0000000000000000,
                    0.0000000000000000,  1.0000000000000000,  0.0000000000000000,
                    1.0000000000000000,  1.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                    0.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000,  1.0000000000000000,
                    0.0000000000000000,  0.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  0.0000000000000000,  1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,  1.0000000000000000,
                    0.0000000000000000,  1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000,  1.0000000000000000;
    }
    else if(nOrderQuadrature == 4){
        //Four-point Lobatto quadrature.
        Weights.resize(64);
        Weights <<  0.0046296296296296,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.0046296296296296,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.0046296296296296,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.0046296296296296,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.5787037037037038,
                    0.5787037037037038,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.5787037037037038,
                    0.5787037037037038,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.5787037037037038,
                    0.5787037037037038,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.5787037037037038,
                    0.5787037037037038,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.0046296296296296,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.0046296296296296,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.1157407407407408,
                    0.1157407407407408,
                    0.0231481481481481,
                    0.0046296296296296,
                    0.0231481481481481,
                    0.0231481481481481,
                    0.0046296296296296;

        Points.resize(64,3);
        Points  << -1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                   -0.4472135954999579, -1.0000000000000000, -1.0000000000000000,
                    0.4472135954999579, -1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -0.4472135954999579, -1.0000000000000000,
                   -0.4472135954999579, -0.4472135954999579, -1.0000000000000000,
                    0.4472135954999579, -0.4472135954999579, -1.0000000000000000,
                    1.0000000000000000, -0.4472135954999579, -1.0000000000000000,
                   -1.0000000000000000,  0.4472135954999579, -1.0000000000000000,
                   -0.4472135954999579,  0.4472135954999579, -1.0000000000000000,
                    0.4472135954999579,  0.4472135954999579, -1.0000000000000000,
                    1.0000000000000000,  0.4472135954999579, -1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                   -0.4472135954999579,  1.0000000000000000, -1.0000000000000000,
                    0.4472135954999579,  1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -1.0000000000000000, -0.4472135954999579,
                   -0.4472135954999579, -1.0000000000000000, -0.4472135954999579,
                    0.4472135954999579, -1.0000000000000000, -0.4472135954999579,
                    1.0000000000000000, -1.0000000000000000, -0.4472135954999579,
                   -1.0000000000000000, -0.4472135954999579, -0.4472135954999579,
                   -0.4472135954999579, -0.4472135954999579, -0.4472135954999579,
                    0.4472135954999579, -0.4472135954999579, -0.4472135954999579,
                    1.0000000000000000, -0.4472135954999579, -0.4472135954999579,
                   -1.0000000000000000,  0.4472135954999579, -0.4472135954999579,
                   -0.4472135954999579,  0.4472135954999579, -0.4472135954999579,
                    0.4472135954999579,  0.4472135954999579, -0.4472135954999579,
                    1.0000000000000000,  0.4472135954999579, -0.4472135954999579,
                   -1.0000000000000000,  1.0000000000000000, -0.4472135954999579,
                   -0.4472135954999579,  1.0000000000000000, -0.4472135954999579,
                    0.4472135954999579,  1.0000000000000000, -0.4472135954999579,
                    1.0000000000000000,  1.0000000000000000, -0.4472135954999579,
                   -1.0000000000000000, -1.0000000000000000,  0.4472135954999579,
                   -0.4472135954999579, -1.0000000000000000,  0.4472135954999579,
                    0.4472135954999579, -1.0000000000000000,  0.4472135954999579,
                    1.0000000000000000, -1.0000000000000000,  0.4472135954999579,
                   -1.0000000000000000, -0.4472135954999579,  0.4472135954999579,
                   -0.4472135954999579, -0.4472135954999579,  0.4472135954999579,
                    0.4472135954999579, -0.4472135954999579,  0.4472135954999579,
                    1.0000000000000000, -0.4472135954999579,  0.4472135954999579,
                   -1.0000000000000000,  0.4472135954999579,  0.4472135954999579,
                   -0.4472135954999579,  0.4472135954999579,  0.4472135954999579,
                    0.4472135954999579,  0.4472135954999579,  0.4472135954999579,
                    1.0000000000000000,  0.4472135954999579,  0.4472135954999579,
                   -1.0000000000000000,  1.0000000000000000,  0.4472135954999579,
                   -0.4472135954999579,  1.0000000000000000,  0.4472135954999579,
                    0.4472135954999579,  1.0000000000000000,  0.4472135954999579,
                    1.0000000000000000,  1.0000000000000000,  0.4472135954999579,
                   -1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                   -0.4472135954999579, -1.0000000000000000,  1.0000000000000000,
                    0.4472135954999579, -1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                   -1.0000000000000000, -0.4472135954999579,  1.0000000000000000,
                   -0.4472135954999579, -0.4472135954999579,  1.0000000000000000,
                    0.4472135954999579, -0.4472135954999579,  1.0000000000000000,
                    1.0000000000000000, -0.4472135954999579,  1.0000000000000000,
                   -1.0000000000000000,  0.4472135954999579,  1.0000000000000000,
                   -0.4472135954999579,  0.4472135954999579,  1.0000000000000000,
                    0.4472135954999579,  0.4472135954999579,  1.0000000000000000,
                    1.0000000000000000,  0.4472135954999579,  1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,  1.0000000000000000,
                   -0.4472135954999579,  1.0000000000000000,  1.0000000000000000,
                    0.4472135954999579,  1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000,  1.0000000000000000;
    }
    else if(nOrderQuadrature == 5){
        //Five-point Lobatto quadrature.
        Weights.resize(125);
        Weights <<  0.0010000000000000,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0010000000000000,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827161,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0387160493827161,
                    0.0505679012345679,
                    0.0387160493827161,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827161,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0010000000000000,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0010000000000000,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827160,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.1613840877914952,
                    0.2107873799725651,
                    0.1613840877914952,
                    0.0296419753086420,
                    0.0387160493827160,
                    0.2107873799725651,
                    0.2753141289437586,
                    0.2107873799725651,
                    0.0387160493827160,
                    0.0296419753086420,
                    0.1613840877914952,
                    0.2107873799725651,
                    0.1613840877914952,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827160,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0387160493827160,
                    0.0505679012345679,
                    0.0387160493827160,
                    0.0071111111111111,
                    0.0387160493827160,
                    0.2107873799725651,
                    0.2753141289437586,
                    0.2107873799725651,
                    0.0387160493827160,
                    0.0505679012345679,
                    0.2753141289437586,
                    0.3595939643347051,
                    0.2753141289437586,
                    0.0505679012345679,
                    0.0387160493827160,
                    0.2107873799725651,
                    0.2753141289437586,
                    0.2107873799725651,
                    0.0387160493827160,
                    0.0071111111111111,
                    0.0387160493827160,
                    0.0505679012345679,
                    0.0387160493827160,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827160,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.1613840877914952,
                    0.2107873799725651,
                    0.1613840877914952,
                    0.0296419753086420,
                    0.0387160493827160,
                    0.2107873799725651,
                    0.2753141289437586,
                    0.2107873799725651,
                    0.0387160493827160,
                    0.0296419753086420,
                    0.1613840877914952,
                    0.2107873799725651,
                    0.1613840877914952,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827160,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0010000000000000,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0010000000000000,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827161,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0387160493827161,
                    0.0505679012345679,
                    0.0387160493827161,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0296419753086420,
                    0.0387160493827161,
                    0.0296419753086420,
                    0.0054444444444444,
                    0.0010000000000000,
                    0.0054444444444444,
                    0.0071111111111111,
                    0.0054444444444444,
                    0.0010000000000000;

        Points.resize(125,3);
        Points  << -1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                   -0.6546536707079772, -1.0000000000000000, -1.0000000000000000,
                    0.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                    0.6546536707079772, -1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -0.6546536707079772, -1.0000000000000000,
                   -0.6546536707079772, -0.6546536707079772, -1.0000000000000000,
                    0.0000000000000000, -0.6546536707079772, -1.0000000000000000,
                    0.6546536707079772, -0.6546536707079772, -1.0000000000000000,
                    1.0000000000000000, -0.6546536707079772, -1.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000, -1.0000000000000000,
                   -0.6546536707079772,  0.0000000000000000, -1.0000000000000000,
                    0.0000000000000000,  0.0000000000000000, -1.0000000000000000,
                    0.6546536707079772,  0.0000000000000000, -1.0000000000000000,
                    1.0000000000000000,  0.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000,  0.6546536707079772, -1.0000000000000000,
                   -0.6546536707079772,  0.6546536707079772, -1.0000000000000000,
                    0.0000000000000000,  0.6546536707079772, -1.0000000000000000,
                    0.6546536707079772,  0.6546536707079772, -1.0000000000000000,
                    1.0000000000000000,  0.6546536707079772, -1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                   -0.6546536707079772,  1.0000000000000000, -1.0000000000000000,
                    0.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                    0.6546536707079772,  1.0000000000000000, -1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000, -1.0000000000000000,
                   -1.0000000000000000, -1.0000000000000000, -0.6546536707079772,
                   -0.6546536707079772, -1.0000000000000000, -0.6546536707079772,
                    0.0000000000000000, -1.0000000000000000, -0.6546536707079772,
                    0.6546536707079772, -1.0000000000000000, -0.6546536707079772,
                    1.0000000000000000, -1.0000000000000000, -0.6546536707079772,
                   -1.0000000000000000, -0.6546536707079772, -0.6546536707079772,
                   -0.6546536707079772, -0.6546536707079772, -0.6546536707079772,
                    0.0000000000000000, -0.6546536707079772, -0.6546536707079772,
                    0.6546536707079772, -0.6546536707079772, -0.6546536707079772,
                    1.0000000000000000, -0.6546536707079772, -0.6546536707079772,
                   -1.0000000000000000,  0.0000000000000000, -0.6546536707079772,
                   -0.6546536707079772,  0.0000000000000000, -0.6546536707079772,
                    0.0000000000000000,  0.0000000000000000, -0.6546536707079772,
                    0.6546536707079772,  0.0000000000000000, -0.6546536707079772,
                    1.0000000000000000,  0.0000000000000000, -0.6546536707079772,
                   -1.0000000000000000,  0.6546536707079772, -0.6546536707079772,
                   -0.6546536707079772,  0.6546536707079772, -0.6546536707079772,
                    0.0000000000000000,  0.6546536707079772, -0.6546536707079772,
                    0.6546536707079772,  0.6546536707079772, -0.6546536707079772,
                    1.0000000000000000,  0.6546536707079772, -0.6546536707079772,
                   -1.0000000000000000,  1.0000000000000000, -0.6546536707079772,
                   -0.6546536707079772,  1.0000000000000000, -0.6546536707079772,
                    0.0000000000000000,  1.0000000000000000, -0.6546536707079772,
                    0.6546536707079772,  1.0000000000000000, -0.6546536707079772,
                    1.0000000000000000,  1.0000000000000000, -0.6546536707079772,
                   -1.0000000000000000, -1.0000000000000000,  0.0000000000000000,
                   -0.6546536707079772, -1.0000000000000000,  0.0000000000000000,
                    0.0000000000000000, -1.0000000000000000,  0.0000000000000000,
                    0.6546536707079772, -1.0000000000000000,  0.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000, -0.6546536707079772,  0.0000000000000000,
                   -0.6546536707079772, -0.6546536707079772,  0.0000000000000000,
                    0.0000000000000000, -0.6546536707079772,  0.0000000000000000,
                    0.6546536707079772, -0.6546536707079772,  0.0000000000000000,
                    1.0000000000000000, -0.6546536707079772,  0.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000,  0.0000000000000000,
                   -0.6546536707079772,  0.0000000000000000,  0.0000000000000000,
                    0.0000000000000000,  0.0000000000000000,  0.0000000000000000,
                    0.6546536707079772,  0.0000000000000000,  0.0000000000000000,
                    1.0000000000000000,  0.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000,  0.6546536707079772,  0.0000000000000000,
                   -0.6546536707079772,  0.6546536707079772,  0.0000000000000000,
                    0.0000000000000000,  0.6546536707079772,  0.0000000000000000,
                    0.6546536707079772,  0.6546536707079772,  0.0000000000000000,
                    1.0000000000000000,  0.6546536707079772,  0.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,  0.0000000000000000,
                   -0.6546536707079772,  1.0000000000000000,  0.0000000000000000,
                    0.0000000000000000,  1.0000000000000000,  0.0000000000000000,
                    0.6546536707079772,  1.0000000000000000,  0.0000000000000000,
                    1.0000000000000000,  1.0000000000000000,  0.0000000000000000,
                   -1.0000000000000000, -1.0000000000000000,  0.6546536707079772,
                   -0.6546536707079772, -1.0000000000000000,  0.6546536707079772,
                    0.0000000000000000, -1.0000000000000000,  0.6546536707079772,
                    0.6546536707079772, -1.0000000000000000,  0.6546536707079772,
                    1.0000000000000000, -1.0000000000000000,  0.6546536707079772,
                   -1.0000000000000000, -0.6546536707079772,  0.6546536707079772,
                   -0.6546536707079772, -0.6546536707079772,  0.6546536707079772,
                    0.0000000000000000, -0.6546536707079772,  0.6546536707079772,
                    0.6546536707079772, -0.6546536707079772,  0.6546536707079772,
                    1.0000000000000000, -0.6546536707079772,  0.6546536707079772,
                   -1.0000000000000000,  0.0000000000000000,  0.6546536707079772,
                   -0.6546536707079772,  0.0000000000000000,  0.6546536707079772,
                    0.0000000000000000,  0.0000000000000000,  0.6546536707079772,
                    0.6546536707079772,  0.0000000000000000,  0.6546536707079772,
                    1.0000000000000000,  0.0000000000000000,  0.6546536707079772,
                   -1.0000000000000000,  0.6546536707079772,  0.6546536707079772,
                   -0.6546536707079772,  0.6546536707079772,  0.6546536707079772,
                    0.0000000000000000,  0.6546536707079772,  0.6546536707079772,
                    0.6546536707079772,  0.6546536707079772,  0.6546536707079772,
                    1.0000000000000000,  0.6546536707079772,  0.6546536707079772,
                   -1.0000000000000000,  1.0000000000000000,  0.6546536707079772,
                   -0.6546536707079772,  1.0000000000000000,  0.6546536707079772,
                    0.0000000000000000,  1.0000000000000000,  0.6546536707079772,
                    0.6546536707079772,  1.0000000000000000,  0.6546536707079772,
                    1.0000000000000000,  1.0000000000000000,  0.6546536707079772,
                   -1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                   -0.6546536707079772, -1.0000000000000000,  1.0000000000000000,
                    0.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                    0.6546536707079772, -1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000, -1.0000000000000000,  1.0000000000000000,
                   -1.0000000000000000, -0.6546536707079772,  1.0000000000000000,
                   -0.6546536707079772, -0.6546536707079772,  1.0000000000000000,
                    0.0000000000000000, -0.6546536707079772,  1.0000000000000000,
                    0.6546536707079772, -0.6546536707079772,  1.0000000000000000,
                    1.0000000000000000, -0.6546536707079772,  1.0000000000000000,
                   -1.0000000000000000,  0.0000000000000000,  1.0000000000000000,
                   -0.6546536707079772,  0.0000000000000000,  1.0000000000000000,
                    0.0000000000000000,  0.0000000000000000,  1.0000000000000000,
                    0.6546536707079772,  0.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  0.0000000000000000,  1.0000000000000000,
                   -1.0000000000000000,  0.6546536707079772,  1.0000000000000000,
                   -0.6546536707079772,  0.6546536707079772,  1.0000000000000000,
                    0.0000000000000000,  0.6546536707079772,  1.0000000000000000,
                    0.6546536707079772,  0.6546536707079772,  1.0000000000000000,
                    1.0000000000000000,  0.6546536707079772,  1.0000000000000000,
                   -1.0000000000000000,  1.0000000000000000,  1.0000000000000000,
                   -0.6546536707079772,  1.0000000000000000,  1.0000000000000000,
                    0.0000000000000000,  1.0000000000000000,  1.0000000000000000,
                    0.6546536707079772,  1.0000000000000000,  1.0000000000000000,
                    1.0000000000000000,  1.0000000000000000,  1.0000000000000000;
    }
}
